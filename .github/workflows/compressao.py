def compressao (lista):    
  saida = []
  repeticao = 0
  vezes = 0
  while repeticao < len(lista):
    vezes = 1
    while repeticao + 1 < len(lista) and lista[repeticao] == lista[repeticao + 1]:
      vezes += 1
      repeticao += 1
    saida.append(vezes)
    saida.append(lista[repeticao])
    repeticao += 1
  return saida
print(compressao([1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4]))
print(compressao([0,0,0,0,1,1,1,1,0,0,0,0]))
print(compressao([2,2,2,2,2,1,1,1,0,0,0,0,0,1,1,1,3,3,3]))
print(compressao([0,0,0,0,0,0,1,1,3,3,4,1,1,4,4,4,4]))4]))ssÃ£o RLE:

def rle_compress(lst):
    # Verifica se a lista estÃ¡ vazia
    if not lst:
        return []

    compressed = []
    i = 0

    # Percorre a lista usando while
    while i < len(lst):
        count = 1
        # Conta quantos elementos consecutivos sÃ£o iguais
        while i + 1 < len(lst) and lst[i] == lst[i + 1]:
            count += 1
            i += 1
        # Adiciona o nÃºmero de repetiÃ§Ãµes seguido do valor
        compressed.append(count)
        compressed.append(lst[i])
        i += 1
    
    return compressed

# Teste com os exemplos dados
test_1 = [1, 1, 1, 1, 2, 1, 1, 1]
test_2 = [1, 2, 3, 4, 1]

print(rle_compress(test_1))  # SaÃ­da: [4, 1, 1, 2, 3, 1]
print(rle_compress(test_2))  # SaÃ­da: [1, 1, 1, 2, 1, 3, 1, 4, 1, 1]

'''ExplicaÃ§Ã£o do cÃ³digo:

1. A funÃ§Ã£o rle_compress recebe uma lista de nÃºmeros como argumento.


2. A funÃ§Ã£o inicia com uma verificaÃ§Ã£o para garantir que a lista nÃ£o estÃ¡ vazia.


3. Utilizamos um loop while para percorrer a lista. Quando encontramos nÃºmeros consecutivos iguais, o programa conta quantos sÃ£o.


4. ApÃ³s contar os valores consecutivos, adicionamos o nÃºmero de repetiÃ§Ãµes seguido pelo valor correspondente na lista comprimida.


5. Continuamos esse processo atÃ© o final da lista.


6. O resultado final Ã© uma lista comprimida conforme a tÃ©cnica RLE.'''



'''Testes:

Para a entrada [1, 1, 1, 1, 2, 1, 1, 1], a saÃ­da serÃ¡ [4, 1, 1, 2, 3, 1].

Para a entrada [1, 2, 3, 4, 1], a saÃ­da serÃ¡ [1, 1, 1, 2, 1, 3, 1, 4, 1, 1].'''


­da serÃ¡ [1, 1, 1, 2, 1, 3, 1, 4, 1, 1].'''


